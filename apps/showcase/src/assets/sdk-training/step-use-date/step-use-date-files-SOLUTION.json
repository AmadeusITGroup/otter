{
  "app.component.html": {
    "file": {
      "contents": "<button type=\"button\" class=\"btn btn-primary\" (click)=\"updateValues()\">Update Values</button>\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th scope=\"col\"></th>\n      <th scope=\"col\">Date</th>\n      <th scope=\"col\">utils.DateTime</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Value</th>\n      <td>{{date}}</td>\n      <td>{{dateTime}}</td>\n    </tr>\n  </tbody>\n</table>"
    }
  },
  "app.component.scss": {
    "file": {
      "contents": ""
    }
  },
  "app.component.spec.ts": {
    "file": {
      "contents": "import { TestBed } from '@angular/core/testing';\nimport { AppComponent } from './app.component';\n\ndescribe('AppComponent', () => {\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [AppComponent],\n    }).compileComponents();\n  });\n\n  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n\n  it(`should have the 'tutorial-app' title`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.title).toEqual('tutorial-app');\n  });\n\n  it('should render title', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement as HTMLElement;\n    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, tutorial-app');\n  });\n});\n"
    }
  },
  "app.component.ts": {
    "file": {
      "contents": "import { utils } from '@ama-sdk/core';\nimport { formatDate } from '@angular/common';\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'tutorial-app';\n\n  /** Date value used to initialize the two date variables */\n  public dateValue = '2024-09-01T10:00:00+02:00';\n  /** Date variable of type Date */\n  public date: Date | null = null;\n  /** Date variable of type utils.DateTime */\n  public dateTime: utils.DateTime | null = null;\n\n  constructor() {\n    this.updateValues();\n  }\n\n  public updateValues() {\n    /** Set the values of the two variables here */\n    this.date = new Date(this.dateValue);\n    this.dateTime = new utils.DateTime(this.dateValue);\n  }\n}\n"
    }
  },
  "app.config.ts": {
    "file": {
      "contents": "import { ApplicationConfig, provideZoneChangeDetection, importProvidersFrom } from '@angular/core';\nimport { provideRouter } from '@angular/router';\n\nimport { routes } from './app.routes';\nimport { StorageSync } from '@o3r/store-sync';\nimport { RuntimeChecks, StoreModule } from '@ngrx/store';\nimport { Serializer } from '@o3r/core';\nimport { environment, additionalModules } from '../environments/environment';\nimport { EffectsModule } from '@ngrx/effects';\nimport { prefersReducedMotion } from '@o3r/application';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nconst localStorageStates: Record<string, Serializer<any>>[] = [/* Store to register in local storage */];\nconst storageSync = new StorageSync({\n  keys: localStorageStates, rehydrate: true\n});\n\nconst rootReducers = {\n  \n};\n\nconst metaReducers = [storageSync.localStorageSync()];\nconst runtimeChecks: Partial<RuntimeChecks> = {\n  strictActionImmutability: false,\n  strictActionSerializability: false,\n  strictActionTypeUniqueness: !environment.production,\n  strictActionWithinNgZone: !environment.production,\n  strictStateImmutability: !environment.production,\n  strictStateSerializability: false\n};\n\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), importProvidersFrom(\nEffectsModule.forRoot([])), importProvidersFrom(\nStoreModule.forRoot(rootReducers, {metaReducers, runtimeChecks})), importProvidersFrom(\nadditionalModules), importProvidersFrom(\nBrowserAnimationsModule.withConfig({disableAnimations: prefersReducedMotion()}))]\n};\n"
    }
  },
  "app.routes.ts": {
    "file": {
      "contents": "import { Routes } from '@angular/router';\n\nexport const routes: Routes = [];\n"
    }
  }
}
