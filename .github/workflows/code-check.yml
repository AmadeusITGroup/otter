name: Code check

on:
  workflow_call:
    inputs:
      affected:
        type: boolean
        required: false
        default: false
        description: Run test only on affected packages if true
    secrets:
      NX_CLOUD_ACCESS_TOKEN:
        required: false
        description: Token to use Nx Cloud token
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ inputs.affected && '0' || '1' }}
      - name: Setup
        uses: ./tools/github-actions/setup
      - uses: ./.github/actions/setup-java
        with:
          install-jdk: 'true'
      - name: Cache Jest
        uses: actions/cache@v3
        env:
          hash: ${{ hashFiles('package.json', 'tsconfig.base.json', 'tsconfig.build.json', 'nx.json') }}
        with:
          path: .cache/jest
          key: ${{ runner.os }}-jest-${{ env.hash }}
          restore-keys: |
            ${{ runner.os }}-jest-${{ env.hash }}
            ${{ runner.os }}-jest
            ${{ runner.os }}
      - name: Build swagger generator
        run: yarn nx run ama-sdk-generator-sdk:build-swagger
      - name: Test
        env:
          testCmd: ${{ inputs.affected && format('test:affected --base=remotes/origin/{0}', github.base_ref || github.ref_name) || 'test'}}
        run: yarn ${{ env.testCmd }}
  lint:
    runs-on: ubuntu-latest
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ inputs.affected && '0' || '1' }}
      - name: Setup
        uses: ./tools/github-actions/setup
      - name: Cache Eslint
        uses: actions/cache@v3
        with:
          path: .cache/eslint
          key: ${{ runner.os }}-eslint-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-eslint-${{ env.hash }}
            ${{ runner.os }}-eslint
            ${{ runner.os }}
      - name: Lint
        env:
          lintCmd: ${{ inputs.affected && format('lint:affected --base=remotes/origin/{0}', github.base_ref || github.ref_name) || 'lint'}}
        run: yarn ${{ env.lintCmd }} --configuration ci
