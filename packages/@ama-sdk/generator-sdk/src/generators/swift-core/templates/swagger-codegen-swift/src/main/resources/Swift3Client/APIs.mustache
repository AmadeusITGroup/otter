// APIs.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

open class {{projectName}}API {
    public static var basePath = "{{{basePath}}}"
    public static var credential: URLCredential?
    public static var customHeaders: [String:String] = [:]
    public static var requestBuilderFactory: RequestBuilderFactory = AlamofireRequestBuilderFactory()
}

public struct RequestOptions {
    public var queryParams: [String: String]?
    public var queryParamsList: [String: [String]]?
    public var body: Any?
    public var headers: [String: String]?
    public var basePath: String?
}

public enum ApiTypes: Int {
    case DAPI, DEFAULT
}

public struct ReplyPluginContext<T> {
    public var header: [String: String]
    public var statusCode: Int
    public var data: T?
    public var apiName: String?
    public var apiType: ApiTypes
}

public typealias RequestPlugin = (_ request: RequestOptions) -> RequestOptions

public protocol ReplyPlugin {
    func transform<T>(response: ReplyPluginContext<T>) -> ReplyPluginContext<T>
}

open class APIBase {

    public var requestPlugins: [RequestPlugin], replyPlugins: [ReplyPlugin]
    public init(requestPlugins: [RequestPlugin]=[], replyPlugins: [ReplyPlugin]=[]) {
        self.requestPlugins=requestPlugins
        self.replyPlugins=replyPlugins
    }

    func toParameters(_ encodable: JSONEncodable?) -> [String: Any]? {
        let encoded: Any? = encodable?.encodeToJSON()

        if encoded! is [Any] {
            var dictionary = [String:Any]()
            for (index, item) in (encoded as! [Any]).enumerated() {
                dictionary["\(index)"] = item
            }
            return dictionary
        } else {
            return encoded as? [String:Any]
        }
    }
}

open class RequestBuilder<T> {
    var credential: URLCredential?
    var headers: [String:String]
    var parameters: Any?
    public let isBody: Bool
    public let method: String
    var URLString: String
    var queryParams: [String: String]=[:]
    var queryParamsList: [String: [String]]=[:]
    let requestPlugins: [RequestPlugin]

    /// Optional block to obtain a reference to the request's progress instance when available.
    public var onProgressReady: ((Progress) -> ())?

    required public init(method: String, URLString: String, parameters: Any?, isBody: Bool, headers: [String:String] = [:], requestPlugins: [RequestPlugin]=[], replyPlugins: [ReplyPlugin]=[], apiType: ApiTypes=ApiTypes.DAPI, apiName: String?=nil) {
        self.method = method
        self.URLString = URLString
        self.parameters = parameters
        self.isBody = isBody
        self.headers = headers
        self.requestPlugins=requestPlugins

        addHeaders({{projectName}}API.customHeaders)
        segregateUrl()
        prepareOptions()
    }

    open func addHeaders(_ aHeaders:[String:String]) {
        for (header, value) in aHeaders {
            addHeader(name: header, value: value)
        }
    }

    open func execute(_ completion: @escaping (_ response: Response<T>?, _ error: ErrorResponse?, _ statusCode: Int, _ header: [String: String]) -> Void) { }

    @discardableResult public func addHeader(name: String, value: String) -> Self {
        if !value.isEmpty {
            headers[name] = value
        }
        return self
    }

    open func addCredential() -> Self {
        self.credential = {{projectName}}API.credential
        return self
    }

    // MARK: Segregate URL
    private func splitURL() -> [String] {
        let queryParamMark="?"
        return URLString.components(separatedBy: queryParamMark)
    }

    private func segregateUrl() {
        if requestPlugins.count > 0 {
            let urlComp=splitURL()

            findQueryParamsExist(urlComp)
        }
    }

    private func findQueryParamsExist(_ urlComp: [String]) {
        let queryParamExist=2, urlInx=0, queryParamInx=1
        if urlComp.count == queryParamExist {
            URLString=urlComp[urlInx]
            fillQueryParams(urlComp[queryParamInx])
        }
    }

    private func fillQueryParams(_ urlQueryString: String) {
        let paramSplit="&"

        let queryStrings=urlQueryString.components(separatedBy: paramSplit)
        queryStrings.forEach { (queryString) in
            if queryString.trimmingCharacters(in: .whitespacesAndNewlines) != "" {
                constructQueryParam(queryString: queryString)
            }
        }
    }

    private func constructQueryParam(queryString: String) {
        let queryParamSplit="=", queryParamPairCount=2
        let queryStringComponent=queryString.components(separatedBy: queryParamSplit)
        if queryStringComponent.count == queryParamPairCount {
            if queryParams[queryStringComponent[0]] == nil {
                queryParams[queryStringComponent[0]]=queryStringComponent[1]
            } else {
                createQueryParamList(queryStringComponent[0], queryStringComponent[1])
            }
        }
    }

    private func createQueryParamList(_ key: String, _ value: String) {
        if queryParamsList[key] == nil, let queryParamsValue = queryParams[key] {
            queryParamsList[key]=[queryParamsValue, value]
        } else {
            queryParamsList[key]?.append(value)
        }

    }

    // MARK: Request plugin call
    private func prepareOptions() {

        for plugin in requestPlugins {
            let resp=plugin(RequestOptions(queryParams: queryParams, queryParamsList: queryParamsList, body: parameters, headers: headers, basePath: URLString))
            setRequestPluginData(resp: resp)
            addQueryParamsToUrl(queryParams: resp.queryParams, queryParamsList: resp.queryParamsList)
        }

    }

    private func setRequestPluginData(resp: RequestOptions) {
        if let url = resp.basePath {
            URLString=url
        }

        if let body = resp.body {
            parameters=body
        }

        if let headers = resp.headers {
            self.headers=headers
        }

        if let queryParams = resp.queryParams {
            self.queryParams=queryParams
        }

        if let queryParamsList = resp.queryParamsList {
            self.queryParamsList=queryParamsList
        }

    }

    private func addQueryParamsToUrl(queryParams: [String: String]?, queryParamsList: [String: [String]]?) {
        if let params=queryParams, params.count > 0 {
            let urlComponent=splitURL()
            var urlQueryItems: [URLQueryItem]?=[]

            if let queryParams=queryParams {
                urlQueryItems?.append(contentsOf: APIHelper.mapValuesToQueryItems(values: queryParams) ?? [])
            }

            if let queryParamsList=queryParamsList {
                urlQueryItems?.append(contentsOf: APIHelper.mapValuesToQueryItems(values: queryParamsList) ?? [])
            }

            if urlComponent.count > 0 {
                var url = URLComponents(string: urlComponent[0])
                url?.queryItems=urlQueryItems
                URLString = url?.string ?? ""
            }
        }
    }

}

public protocol RequestBuilderFactory {
    func getBuilder<T>() -> RequestBuilder<T>.Type
}

