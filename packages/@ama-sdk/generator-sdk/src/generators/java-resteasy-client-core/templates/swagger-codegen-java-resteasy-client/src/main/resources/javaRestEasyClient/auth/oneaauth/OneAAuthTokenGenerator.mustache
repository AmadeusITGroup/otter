package {{authenticationPackage}}.oneaauth;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.UUID;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class OneAAuthTokenGenerator {

    // OBE Date Pattern
    private final static String OBE_DEFAULT_DATE_PATTERN = "yyyy-MM-dd'T'HH:mm:ss'.000Z'";

    private final static String OBE_AUTH_TOKEN_PREFIX = "1AAuth ";
    // OBE Auth blank space is there after text

    private final static String SHA_ENCRYPTION_ALGO = "SHA-1";

    public static String generateAuthToken(String userId, String password, String organisation, String officeId) {

        String guid = UUID.randomUUID().toString();
        String guidEncoded = Base64.getEncoder().encodeToString(guid.getBytes());
        LocalDateTime now = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);

        String date = now.format(DateTimeFormatter.ofPattern(OBE_DEFAULT_DATE_PATTERN));
        AuthToken obeToken = new AuthToken();
        obeToken.setOfficeId(officeId);
        obeToken.setOrganization(organisation);
        obeToken.setUserId(userId);
        obeToken.setPassword(getEncodedPassword(password, date, guid));
        obeToken.setNonce(guidEncoded);
        obeToken.setTimestamp(date);
        String jsonToken = null;
        String token = "";

        try {
            jsonToken = new ObjectMapper().writeValueAsString(obeToken);
            token = OBE_AUTH_TOKEN_PREFIX + Base64.getEncoder().encodeToString((jsonToken.getBytes()));
        } catch (JsonProcessingException e) {
            // TODO To manage properly
            e.printStackTrace();
        }

        return token;
    }


    private static String getEncodedPassword(String password, String timestamp, String guid) {
        try {
            MessageDigest hashedPasswordDigest = MessageDigest.getInstance(SHA_ENCRYPTION_ALGO);
            hashedPasswordDigest.update(guid.getBytes(StandardCharsets.UTF_8));
            hashedPasswordDigest.update(timestamp.getBytes(StandardCharsets.UTF_8));
            hashedPasswordDigest.update(hexStringToByteArray(password));
            return Base64.getEncoder().encodeToString(hashedPasswordDigest.digest());
        } catch (NoSuchAlgorithmException e) {
            // TODO To manage properly
            e.printStackTrace();
        }
        return null;
    }

    private static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
               + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

}
