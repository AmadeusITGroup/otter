/**
 * {{#description}}{{.}}{{/description}}{{^description}}{{classname}}Private{{/description}}
 */{{#description}}
@ApiModel(description = "{{{description}}}"){{/description}}
{{>generatedAnnotation}}{{#discriminator}}{{>typeInfoAnnotation}}{{/discriminator}}{{>xmlAnnotation}}
public abstract class {{classname}}Private<T extends {{classname}}Private> {{#parent}}extends {{{parent}}} {{/parent}}{{#parcelableModel}}implements Parcelable {{#serializableModel}}, Serializable {{/serializableModel}}{{/parcelableModel}}{{^parcelableModel}}{{#serializableModel}}implements Serializable {{/serializableModel}}{{/parcelableModel}}{
{{#serializableModel}}
  private static final long serialVersionUID = 1L;

{{/serializableModel}}
  {{#vars}}
    {{#isEnum}}
    {{^isContainer}}
{{>modelInnerEnum}}
    {{/isContainer}}
    {{/isEnum}}
    {{#items.isEnum}}
      {{#items}}
      {{^isContainer}}
{{>modelInnerEnum}}
      {{/isContainer}}
      {{/items}}
    {{/items.isEnum}}
  {{#jackson}}
  @JsonProperty("{{baseName}}")
  {{#withXml}}
    {{^isContainer}}
  @JacksonXmlProperty({{#isXmlAttribute}}isAttribute = true, {{/isXmlAttribute}}{{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
    {{/isContainer}}
    {{#isContainer}}
      {{#isXmlWrapped}}
  // items.xmlName={{items.xmlName}}
  @JacksonXmlElementWrapper(useWrapping = {{isXmlWrapped}}, {{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#items.xmlName}}{{items.xmlName}}{{/items.xmlName}}{{^items.xmlName}}{{items.baseName}}{{/items.xmlName}}")
      {{/isXmlWrapped}}
    {{/isContainer}}
  {{/withXml}}
  {{/jackson}}
  {{#withXml}}
  {{#isXmlAttribute}}
  @XmlAttribute(name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
  {{/isXmlAttribute}}
  {{^isXmlAttribute}}
    {{^isContainer}}
  @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
    {{/isContainer}}
    {{#isContainer}}
  // Is a container wrapped={{isXmlWrapped}}
      {{#items}}
  // items.name={{name}} items.baseName={{baseName}} items.xmlName={{xmlName}} items.xmlNamespace={{xmlNamespace}}
  // items.example={{example}} items.type={{datatype}}
  @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/items}}
      {{#isXmlWrapped}}
  @XmlElementWrapper({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/isXmlWrapped}}
    {{/isContainer}}
  {{/isXmlAttribute}}
  {{/withXml}}
  {{#gson}}
  @SerializedName("{{baseName}}")
  {{/gson}}
  {{#isContainer}}
  private {{{datatypeWithEnum}}} {{name}}{{#required}} = {{{defaultValue}}}{{/required}}{{^required}} = null{{/required}};
  {{/isContainer}}
  {{^isContainer}}
  private {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
  {{/isContainer}}
  {{#vendorExtensions}}{{#x-field-name}}
  private {{x-field-type}} {{x-field-name}} = null;
  {{/x-field-name}}{{/vendorExtensions}}
  {{/vars}}
  {{#gson}}
  {{#discriminator}}
  public T() {
    this.{{discriminator}} = this.getClass().getSimpleName();
  }
  {{/discriminator}}
  {{/gson}}
  {{#vars}}
  {{^isReadOnly}}
  public T {{name}}({{{datatypeWithEnum}}} {{name}}) {
    this.{{name}} = {{name}};
    return (T)this;
  }
  {{#isListContainer}}

  public T add{{nameInCamelCase}}Item({{{items.datatypeWithEnum}}} {{name}}Item) {
    {{^required}}
    if (this.{{name}} == null) {
      this.{{name}} = {{{defaultValue}}};
    }
    {{/required}}
    this.{{name}}.add({{name}}Item);
    return (T)this;
  }
  {{/isListContainer}}
  {{#isMapContainer}}

  public T put{{nameInCamelCase}}Item(String key, {{{items.datatypeWithEnum}}} {{name}}Item) {
    {{^required}}
    if (this.{{name}} == null) {
      this.{{name}} = {{{defaultValue}}};
    }
    {{/required}}
    this.{{name}}.put(key, {{name}}Item);
    return (T)this;
  }
  {{/isMapContainer}}

  {{/isReadOnly}}
   /**
  {{#description}}
   * {{description}}
  {{/description}}
  {{^description}}
   * Get {{name}}
  {{/description}}
  {{#minimum}}
   * minimum: {{minimum}}
  {{/minimum}}
  {{#maximum}}
   * maximum: {{maximum}}
  {{/maximum}}
   * @return {{name}}
  **/
{{#useBeanValidation}}{{>beanValidation}}{{/useBeanValidation}}  @ApiModelProperty({{#example}}example = "{{{example}}}", {{/example}}{{#required}}required = {{required}}, {{/required}}value = "{{{description}}}")
{{#vendorExtensions.extraAnnotation}}
  {{{vendorExtensions.extraAnnotation}}}
{{/vendorExtensions.extraAnnotation}}
  public {{{datatypeWithEnum}}} {{#isBoolean}}is{{/isBoolean}}{{getter}}() {
    return {{name}};
  }
  {{^isReadOnly}}

  public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
    this.{{name}} = {{name}};
  }
  {{/isReadOnly}}
  {{#vendorExtensions}}{{#x-field-name}}
  @JsonIgnore
  public {{x-field-type}} get{{#uppercaseFirst}}{{x-field-name}}{{/uppercaseFirst}}() {
    return this.{{x-field-name}};
  }

  public void set{{#uppercaseFirst}}{{x-field-name}}{{/uppercaseFirst}}({{x-field-type}} value) {
      this.{{x-field-name}} = value;
  }
  {{/x-field-name}}{{/vendorExtensions}}
  {{/vars}}
{{#vendorExtensions}}{{#isReply}}{{#removeEmptyLines}}
  public void revive() {
{{#isReplyWithDictionaries}}
{{#vars}}{{#isNotContainer}}{{^isPrimitiveType}}
    if ({{name}} != null) {
      {{name}}.revive(this.dictionaries);
    }
{{/isPrimitiveType}}{{/isNotContainer}}{{/vars}}
{{#vars}}{{#isListContainer}}{{^items.isPrimitiveType}}
    if ({{name}} != null) {
      for ({{{items.datatypeWithEnum}}} {{name}}Item : {{name}}) {
        {{name}}Item.revive(this.dictionaries);
      }
    }
{{/items.isPrimitiveType}}{{/isListContainer}}{{/vars}}{{/isReplyWithDictionaries}}
  }
{{/removeEmptyLines}}{{/isReply}}{{/vendorExtensions}}
{{#vendorExtensions}}{{^isReply}}{{^isDictionary}}{{#removeEmptyLines}}
  public void revive(Object dictionaries) {
{{#vars}}{{#vendorExtensions}}{{#x-field-name}}
    try {
       this.{{x-field-name}} = ((Map<String, {{x-field-type}}>)dictionaries.getClass().getMethod("get{{#uppercaseFirst}}{{x-dictionary-name}}{{/uppercaseFirst}}").invoke(dictionaries)).get(this.{{name}});
    } catch (IllegalAccessException e) {
       //
    } catch (InvocationTargetException e) {
       //
    } catch (NoSuchMethodException e) {
       //
    } catch (NullPointerException e) {
       // Fail silently in case a dictionary is missing (unfortunately it happens)
    }
{{/x-field-name}}{{/vendorExtensions}}
{{#isListContainer}}{{^items.isPrimitiveType}}
    if (this.{{name}} != null) {
      for ({{{items.datatypeWithEnum}}} {{name}}Item : this.{{name}}) {
        {{name}}Item.revive(dictionaries);
      }
    }
{{/items.isPrimitiveType}}{{/isListContainer}}
{{#isMapContainer}}{{^items.isPrimitiveType}}
    if (this.{{name}} != null) {
      for ({{{items.datatypeWithEnum}}} {{name}}Item : this.{{name}}.values()) {
        {{name}}Item.revive(dictionaries);
      }
    }
{{/items.isPrimitiveType}}{{/isMapContainer}}
{{#isNotContainer}}{{^isPrimitiveType}}
    if (this.{{name}} != null) {
      this.{{name}}.revive(dictionaries);
    }
{{/isPrimitiveType}}{{/isNotContainer}}{{/vars}}
  }
{{/removeEmptyLines}}{{/isDictionary}}{{/isReply}}{{/vendorExtensions}}
{{^supportJava6}}
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }{{#hasVars}}
    T {{classVarName}} = (T) o;
    return {{#vars}}{{#isByteArray}}Arrays{{/isByteArray}}{{#isBinary}}Arrays{{/isBinary}}{{^isByteArray}}{{^isBinary}}Objects{{/isBinary}}{{/isByteArray}}.equals(this.{{name}}, {{classVarName}}.{{#isBoolean}}is{{/isBoolean}}{{getter}}()){{#hasMore}} &&
        {{/hasMore}}{{/vars}}{{#parent}} &&
        super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
    return {{#parent}}super.equals(o){{/parent}}{{^parent}}true{{/parent}};{{/hasVars}}
  }

  @Override
  public int hashCode() {
    return Objects.hash({{#vars}}{{^isByteArray}}{{^isBinary}}{{name}}{{/isBinary}}{{/isByteArray}}{{#isByteArray}}Arrays.hashCode({{name}}){{/isByteArray}}{{#isBinary}}Arrays.hashCode({{name}}){{/isBinary}}{{#hasMore}}, {{/hasMore}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}});
  }

{{/supportJava6}}
{{#supportJava6}}
  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }{{#hasVars}}
    T {{classVarName}} = (T) o;
    return {{#vars}}ObjectUtils.equals(this.{{name}}, {{classVarName}}.{{#isBoolean}}is{{/isBoolean}}{{getter}}()){{#hasMore}} &&
    {{/hasMore}}{{/vars}}{{#parent}} &&
    super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
    return true;{{/hasVars}}
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti({{#vars}}{{name}}{{#hasMore}}, {{/hasMore}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}});
  }

{{/supportJava6}}

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class {{classname}} {\n");
    {{#parent}}sb.append("    ").append(toIndentedString(super.toString())).append("\n");{{/parent}}
    {{#vars}}sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
    {{/vars}}sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  {{#parcelableModel}}
  public void writeToParcel(Parcel out, int flags) {
    {{#parent}} super.writeToParcel(out, flags); {{/parent}} {{#vars}}
    out.writeValue({{name}});
    {{/vars}}
  }

  public T() {
    super();
  }

  T(Parcel in) {
    {{#parent}} super(in); {{/parent}}
    {{#vars}}
    {{#isPrimitiveType}}
    {{name}} = ({{{datatypeWithEnum}}})in.readValue(null);
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    {{name}} = ({{{datatypeWithEnum}}})in.readValue({{complexType}}.class.getClassLoader());
    {{/isPrimitiveType}}
    {{/vars}}
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<T> CREATOR = new Parcelable.Creator<T>() {
    public T createFromParcel(Parcel in) {
      return new T(in);
    }
    public T[] newArray(int size) {
      return new T[size];
    }
  };
  {{/parcelableModel}}
}
