package {{package}}.api.impl;

import lombok.Getter;

import {{sdkCorePackage}}.ApiException;
import {{sdkCorePackage}}.ApiResponse;
import {{sdkCorePackage}}.Pair;
import {{sdkCorePackage}}.interfaces.ApiClient;
import {{sdkCorePackage}}.interfaces.ApiClientProvider;

import {{sdkUtilsPackage}}.SdkUtils;

import {{endpointsPackage}}.{{classname}}WrappedApi;

{{#imports}}import {{import}};
{{/imports}}

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}

{{>generatedAnnotation}}
{{#operations}}
public class {{classname}}WrappedApiImpl implements {{classname}}WrappedApi {
  @Getter
  private final ApiClient {{localVariablePrefix}}apiClient;

  public {{classname}}WrappedApiImpl(ApiClientProvider apiClientProvider) {
    this.{{localVariablePrefix}}apiClient = apiClientProvider.getApiClient();
  }

  {{#operation}}
  /**
   * {{summary}}
   * {{notes}}
   * @param request Wrapper of the parameters expected by this operation{{#returnType}}
   * @return ApiResponse<{{{returnType}}}>{{/returnType}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{operationId}}({{vendorExtensions.x-request-wrapper-model-type}} request) throws ApiException {
    Object {{localVariablePrefix}}localVarPostBody = {{#bodyParam}}{{vendorExtensions.x-request-unwrapped-param-value}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#allParams}}{{#required}}
    // verify the required parameter '{{paramName}}' is set
    if ({{vendorExtensions.x-request-unwrapped-param-value}} == null) {
      throw new ApiException(400, "Missing the required parameter '{{paramName}}' when calling {{operationId}}");
    }
    {{/required}}{{/allParams}}
    // create path and map variables
    String {{localVariablePrefix}}localVarPath = "{{{path}}}".replaceAll("\\{format\\}","json"){{#pathParams}}
      .replaceAll("\\{" + "{{baseName}}" + "\\}", SdkUtils.escapeStringForURL({{{vendorExtensions.x-request-unwrapped-param-value}}}.toString())){{/pathParams}};

    // query params
    {{javaUtilPrefix}}List<Pair> {{localVariablePrefix}}localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
    {{javaUtilPrefix}}Map<String, String> {{localVariablePrefix}}localVarHeaderParams = new {{javaUtilPrefix}}HashMap<String, String>();
    {{javaUtilPrefix}}Map<String, Object> {{localVariablePrefix}}localVarFormParams = new {{javaUtilPrefix}}HashMap<String, Object>();

    {{#queryParams}}
    {{localVariablePrefix}}localVarQueryParams.addAll(SdkUtils.parameterToPairs("{{#collectionFormat}}{{{collectionFormat}}}{{/collectionFormat}}", "{{baseName}}", {{vendorExtensions.x-request-unwrapped-param-value}}, {{localVariablePrefix}}apiClient.getDateFormat()));
    {{/queryParams}}

    {{#headerParams}}if ({{vendorExtensions.x-request-unwrapped-param-value}} != null)
      {{localVariablePrefix}}localVarHeaderParams.put("{{baseName}}", SdkUtils.parameterToString({{vendorExtensions.x-request-unwrapped-param-value}}, {{localVariablePrefix}}apiClient.getDateFormat()));
    {{/headerParams}}

    {{#formParams}}if ({{vendorExtensions.x-request-unwrapped-param-value}} != null)
      {{localVariablePrefix}}localVarFormParams.put("{{baseName}}", {{vendorExtensions.x-request-unwrapped-param-value}});
    {{/formParams}}

    final String[] {{localVariablePrefix}}localVarAccepts = {
      {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}}
    };
    final String {{localVariablePrefix}}localVarAccept = SdkUtils.selectHeaderAccept({{localVariablePrefix}}localVarAccepts);

    final String[] {{localVariablePrefix}}localVarContentTypes = {
      {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}
    };
    final String {{localVariablePrefix}}localVarContentType = SdkUtils.selectHeaderContentType({{localVariablePrefix}}localVarContentTypes);

    String[] {{localVariablePrefix}}localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };

    Class<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{localVariablePrefix}}localVarReturnType = {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}.class;
    return {{localVariablePrefix}}apiClient.invokeAPI({{localVariablePrefix}}localVarPath, "{{httpMethod}}", {{localVariablePrefix}}localVarQueryParams, {{localVariablePrefix}}localVarPostBody, {{localVariablePrefix}}localVarHeaderParams, {{localVariablePrefix}}localVarFormParams, {{localVariablePrefix}}localVarAccept, {{localVariablePrefix}}localVarContentType, {{localVariablePrefix}}localVarAuthNames, {{localVariablePrefix}}localVarReturnType);
  }
  {{/operation}}
}
{{/operations}}
