part of {{pubName}}.sdk;

enum ApiTypes {
  DAPI,
  DEFAULT
}

class ApiClient {

  String basePath;
  var client = new Client();

  final _RegList = new RegExp(r'^List<(.*)>$');
  final _RegMap = new RegExp(r'^Map<String,(.*)>$');

  /// List of [RequestPlugin] to execute before the call
  List<RequestPlugin> requestPlugins;

  /// List of [ResponsePlugin] to execute on the revived response
  List<ResponsePlugin> responsePlugins;

  ApiClient({this.basePath = "{{{basePath}}}", this.requestPlugins = const [], this.responsePlugins = const []});

  dynamic _deserialize(dynamic value, String targetType) {
    try {
      switch (targetType) {
        case 'String':
          return '$value';
        case 'int':
          return value is int ? value : int.parse('$value');
        case 'bool':
          return value is bool ? value : '$value'.toLowerCase() == 'true';
        case 'double':
          return value is double ? value : double.parse('$value');
        {{#models}}
          {{#model}}
        case '{{classname}}':
            {{#isEnum}}
           return new {{classname}}.fromJson(value, value['dictionaries']);
            {{/isEnum}}
            {{^isEnum}}
          return new {{classname}}.fromJson(value, value['dictionaries']);
            {{/isEnum}}
          {{/model}}
        {{/models}}
        default:
          {
            Match match;
            if (value is List &&
                (match = _RegList.firstMatch(targetType)) != null) {
              var newTargetType = match[1];
              return value.map((v) => _deserialize(v, newTargetType)).toList();
            } else if (value is Map &&
                (match = _RegMap.firstMatch(targetType)) != null) {
              var newTargetType = match[1];
              return new Map.fromIterables(value.keys,
                  value.values.map((v) => _deserialize(v, newTargetType)));
            }
          }
      }
    } catch (e, stack) {
      throw new ApiException.withInner(500, 'Exception during deserialization.', e, stack);
    }
    throw new ApiException(500, 'Could not find a suitable class for deserialization');
  }

  Future<T> deserialize<T>(String jsonVal, String targetType, ApiTypes apiType, [Response/* ? */ response]) async {
    // Remove all spaces.  Necessary for reg expressions as well.
    targetType = targetType.replaceAll(' ', '');

    if (targetType == 'String') return jsonVal as T;

    var decodedJson = json.decode(jsonVal);

    // Run response plugins
    decodedJson = await this.runResponsePlugins(decodedJson: decodedJson, targetType: targetType, apiType: apiType, response: response);

    return _deserialize(decodedJson, targetType) as T;
  }

  Future<dynamic> runResponsePlugins({dynamic decodedJson, String/* ? */ targetType, Response/* ? */ response, ApiTypes apiType = ApiTypes.DEFAULT, bool isFailure = false}) async {
    var result = decodedJson;
    for (final plugin in this.responsePlugins) {
      if (!isFailure || plugin.runOnFailure) {
        result = await plugin.transformResponse(value: result, targetType: targetType, apiType: apiType, response: response);
      }
    }
    return result;
  }

  Future<RequestPluginInput> runRequestPlugins(RequestPluginInput requestParameter) async {
    RequestPluginInput result = requestParameter;
    for (final plugin in this.requestPlugins) {
      result = await plugin.transformRequest(result);
    }
    return result;
  }

  String serialize(Object/* ? */ obj) {
    String serialized = '';
    if (obj == null) {
      serialized = '';
    } else {
      serialized = json.encode(obj);
    }
    return serialized;
  }

  // We don't use a Map<String, String> for queryParams.
  // If collectionFormat is 'multi' a key might appear multiple times.
  Future<Response> invokeAPI(String path,
                             String method,
                             Map<String, String/* ? */> queryParams,
                             Object/* ? */ body,
                             Map<String, String> headerParams,
                             Map<String, String> formParams,
                             String contentType) async {

    final Iterable<String> ps = queryParams
      .keys
      .where((key) => queryParams[key] != null && (queryParams[key]?.isNotEmpty ?? false))
      .map((key) => '${key}=${parameterToString(queryParams[key])}');
    String queryString = ps.isNotEmpty ? '?' + ps.join('&') : '';

    String url = basePath + path + queryString;

    Map<String, String> headerParamsWithContent = new Map<String, String>();
    headerParamsWithContent.addAll(headerParams);
    headerParamsWithContent['Content-Type'] = contentType;
    final requestPluginInput = new RequestPluginInput(url: url, body: body, queryParams: queryParams, headerParams: headerParamsWithContent, formParams: formParams, contentType: contentType);
    final requestParameter = await this.runRequestPlugins(requestPluginInput);

    final finalBody = requestParameter.body;
    if(finalBody is MultipartRequest) {
      var request = new MultipartRequest(method, Uri.parse(requestParameter.url));
      request.fields.addAll(finalBody.fields);
      request.files.addAll(finalBody.files);
      request.headers.addAll(finalBody.headers);
      request.headers.addAll(requestParameter.headerParams);
      var response = await client.send(request);
      return Response.fromStream(response);
    } else {
      var msgBody = requestParameter.contentType == "application/x-www-form-urlencoded" ? requestParameter.formParams : serialize(finalBody);
      switch(method) {
        case "POST":
          return client.post(requestParameter.url, headers: requestParameter.headerParams, body: msgBody);
        case "PUT":
          return client.put(requestParameter.url, headers: requestParameter.headerParams, body: msgBody);
        case "DELETE":
          return client.delete(requestParameter.url, headers: requestParameter.headerParams);
        case "PATCH":
          return client.patch(requestParameter.url, headers: requestParameter.headerParams, body: msgBody);
        default:
          return client.get(requestParameter.url, headers: requestParameter.headerParams);
      }
    }
  }
}
