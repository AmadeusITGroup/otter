{"api":{"directory":{"dummy":{"directory":{"dummy-api.fixture.ts":{"file":{"contents":"import { DummyApi } from './dummy-api';\n\nexport class DummyApiFixture implements Partial<Readonly<DummyApi>> {\n\n  /** @inheritDoc */\n  public readonly apiName = 'DummyApi';\n\n    /**\n   * Fixture associated to function dummyGet\n   */\n  public dummyGet: jasmine.Spy = jasmine.createSpy('dummyGet');\n}\n"}},"dummy-api.jasmine.fixture.ts":{"file":{"contents":"import { DummyApi } from './dummy-api';\n\nexport class DummyApiFixture implements Partial<Readonly<DummyApi>> {\n\n  /** @inheritDoc */\n  public readonly apiName = 'DummyApi';\n\n    /**\n   * Fixture associated to function dummyGet\n   */\n  public dummyGet: jasmine.Spy = jasmine.createSpy('dummyGet');\n}\n"}},"dummy-api.jest.fixture.ts":{"file":{"contents":"\nimport { DummyApi, DummyApiDummyGetRequestData } from './dummy-api';\n\nexport class DummyApiFixture implements Partial<Readonly<DummyApi>> {\n\n  /** @inheritDoc */\n  public readonly apiName = 'DummyApi';\n\n    /**\n   * Fixture associated to function dummyGet\n   */\n  public dummyGet: jest.Mock<Promise<void>, [DummyApiDummyGetRequestData]> = jest.fn();\n}\n\n"}},"dummy-api.ts":{"file":{"contents":"import { Api, ApiClient, ApiTypes, computePiiParameterTokens,  RequestBody, RequestMetadata, } from '@ama-sdk/core';\n\n/** Parameters object to DummyApi's dummyGet function */\nexport interface DummyApiDummyGetRequestData {\n}\nexport class DummyApi implements Api {\n\n  /** API name */\n  public static readonly apiName = 'DummyApi';\n\n  /** @inheritDoc */\n  public readonly apiName = DummyApi.apiName;\n\n  /** Tokens of the parameters containing PII */\n  public readonly piiParamTokens: { [key: string]: string } = computePiiParameterTokens([]);\n\n  /** @inheritDoc */\n  public client: ApiClient;\n\n  /**\n   * Initialize your interface\n   *\n   * @param apiClient Client used to process call to the API\n   */\n  constructor(apiClient: ApiClient) {\n    this.client = apiClient;\n  }\n\n  /**\n   * \n   * \n   * @param data Data to provide to the API call\n   * @param metadata Metadata to pass to the API call\n   */\n  public async dummyGet(data: DummyApiDummyGetRequestData, metadata?: RequestMetadata<string, string>): Promise<void> {\n    const queryParams = this.client.extractQueryParams<DummyApiDummyGetRequestData>(data, [] as never[]);\n    const metadataHeaderAccept = metadata?.headerAccept || 'application/json';\n    const headers: { [key: string]: string | undefined } = {\n      'Content-Type': metadata?.headerContentType || 'application/json',\n      ...(metadataHeaderAccept ? {'Accept': metadataHeaderAccept} : {})\n    };\n\n    let body: RequestBody = '';\n    const basePath = `${this.client.options.basePath}/dummy`;\n    const tokenizedUrl = `${this.client.options.basePath}/dummy`;\n    const tokenizedOptions = this.client.tokenizeRequestOptions(tokenizedUrl, queryParams, this.piiParamTokens, data);\n\n    const requestOptions = {\n      headers,\n      method: 'GET',\n      basePath,\n      queryParams,\n      body: body || undefined,\n      metadata,\n      tokenizedOptions,\n      api: this\n    };\n\n    const options = await this.client.getRequestOptions(requestOptions);\n    const url = this.client.prepareUrl(options.basePath, options.queryParams);\n\n    const ret = this.client.processCall<void>(url, options, ApiTypes.DEFAULT, DummyApi.apiName, { 200: undefined } , 'dummyGet');\n    return ret;\n  }\n\n}\n"}},"index.ts":{"file":{"contents":"export * from './dummy-api';\n"}}}},"enums.ts":{"file":{"contents":"export {};"}},"fixtures.jasmine.ts":{"file":{"contents":"export { DummyApiFixture } from './dummy/dummy-api.jasmine.fixture';\n"}},"fixtures.jest.ts":{"file":{"contents":"export { DummyApiFixture } from './dummy/dummy-api.jest.fixture';\n"}},"fixtures.ts":{"file":{"contents":"/* @deprecated use fixtures.jasmine file instead */\n\nexport { DummyApiFixture } from './dummy/dummy-api.fixture';\n"}},"index.ts":{"file":{"contents":"export type { DummyApiDummyGetRequestData } from './dummy/index';\nexport { DummyApi } from './dummy/index';\nexport * from './enums';\n"}},"interfaces.ts":{"file":{"contents":"/* @deprecated : this file is deprecated, the RequestData interfaces are exported at package level */\n\nexport type { DummyApiDummyGetRequestData } from './dummy/index';\n"}}}},"models":{"directory":{"base":{"directory":{"enums.ts":{"file":{"contents":"export {};"}},"flight":{"directory":{"flight.reviver.ts":{"file":{"contents":"/**\n * Reviver: Flight\n *\n * THIS FILE HAS BEEN AUTOMATICALLY GENERATED. DO NOT EDIT.\n */\nimport { Flight } from './flight';\nimport { utils,   type ReviverOptions, } from '@ama-sdk/core';\n\nexport function reviveFlight<T extends Flight = Flight>(data: undefined, dictionaries?: any, options?: ReviverOptions): undefined;\nexport function reviveFlight(data: Flight, dictionaries?: any, options?: ReviverOptions): Flight ;\nexport function reviveFlight(data: any, dictionaries?: any, options?: ReviverOptions): Flight  | undefined;\nexport function reviveFlight<T extends Flight>(data: T, dictionaries?: any, options?: ReviverOptions): T ;\nexport function reviveFlight<T extends Flight>(data: any, dictionaries?: any, options?: ReviverOptions): T  | undefined;\nexport function reviveFlight<T extends Flight = Flight>(data: any, dictionaries?: any, options?: ReviverOptions): T  | undefined {\n  if (!data) { return ; }\n  data.departureDateTime = data.departureDateTime ? new utils.DateTime(data.departureDateTime) : undefined;\n  data.paymentExprirationDate = data.paymentExprirationDate ? new Date(data.paymentExprirationDate) : undefined;\n  return data as T;\n}\n"}},"flight.ts":{"file":{"contents":"/**\n * Model: Flight\n *\n * THIS FILE HAS BEEN AUTOMATICALLY GENERATED. DO NOT EDIT.\n *\n */\n\nimport {utils} from '@ama-sdk/core';\n\n\nexport interface Flight {\n  originLocationCode?: string;\n  destinationLocationCode?: string;\n  /** @see utils.DateTime */\n  departureDateTime?: utils.DateTime;\n  /** @see Date */\n  paymentExprirationDate?: Date;\n}\n\n\n"}},"index.ts":{"file":{"contents":"export type { Flight } from './flight';\nexport { reviveFlight } from './flight.reviver';\n"}}}},"index.ts":{"file":{"contents":"export * from './flight';\n"}},"patterns.ts":{"file":{"contents":"\n\n/** Validation regex for a API field name */\nexport const dapiFieldNamePattern = /^[a-z][a-zA-Z0-9\\[\\]_]*$/;\n"}},"revivers.ts":{"file":{"contents":"export { reviveFlight } from './flight';\n"}}}}}},"spec":{"directory":{"api-mock.ts":{"file":{"contents":"import { ApiClient, ApiFetchClient, BaseApiFetchClientConstructor, isApiClient } from '@ama-sdk/core';\n\nimport * as api from '../api';\n\nconst MOCK_SERVER_BASE_PATH = 'http://localhost:10010/v2';\nconst MOCK_SERVER = new ApiFetchClient({basePath: MOCK_SERVER_BASE_PATH});\n\nexport interface Api {\n  dummyApi: api.DummyApi;\n}\n\nexport const myApi: Api = {\n  dummyApi: new api.DummyApi(MOCK_SERVER)\n};\n\n\n/**\n * Retrieve mocked SDK Apis\n *\n * @param config configuration of the Api Client\n */\nexport function getMockedApi(config?: string | BaseApiFetchClientConstructor | ApiClient): Api {\n  let apiConfigObj: ApiClient = MOCK_SERVER;\n  if (typeof config === 'string') {\n    apiConfigObj = new ApiFetchClient({basePath: config});\n  } else if (isApiClient(config)) {\n    apiConfigObj = config;\n  } else if (config) {\n    apiConfigObj = new ApiFetchClient(config);\n  }\n  return {\n    dummyApi: new api.DummyApi(apiConfigObj)\n  };\n}\n"}},"operation-adapter.ts":{"file":{"contents":"import {PathObject} from '@ama-sdk/core';\n\n/* eslint-disable max-len */\nexport const OPERATION_ADAPTER: PathObject[] = [{\n      path: \"/dummy\",regexp: new RegExp('^/dummy(?:/(?=$))?$'),operations: [{\"method\":\"get\"}]\n    }];\n/* eslint-enable max-len */\n"}}}}}