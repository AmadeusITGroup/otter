/* eslint-disable @typescript-eslint/restrict-template-expressions */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
const fs = require('fs');
const path = require('path');
const stringSimilarity = require('string-similarity');
const minimist = require('minimist');
const fetch = require('isomorphic-fetch');

const OPTS = minimist(process.argv.slice(2));

/** OAuth token */
const API_BASE_PATH = `https://dev.azure.com/${OPTS.organization}/${OPTS.project}/_apis`;

const BUILDID = Number(process.env.BUILD_BUILDID);

const options = {
  headers: {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    'Content-Type': 'application/json',
    // eslint-disable-next-line @typescript-eslint/naming-convention
    'Authorization': `Basic ${Buffer.from(`:${OPTS.pat}`).toString('base64')}`
  }
};

/**
 * Format a date as YYYY-MM-DD
 *
 * @param {Date} date
 * @returns {string}
 */
function formatDate(date) {
  const year = date.getUTCFullYear();
  const month = date.getUTCMonth() + 1;
  const day = date.getUTCDate();
  return `${year}-${month < 10 ? `0${month}` : month}-${day < 10 ? `0${day}` : day}`;
}

/**
 * Get all files to be attached from the test results folder
 *
 * @param {string} testFolderPath
 */
function getFilesFolder(testFolderPath) {
  return fs.readdirSync(testFolderPath, {withFileTypes: true}).filter(dir => dir.isDirectory()).map(dir => {
    const files = fs.readdirSync(`${testFolderPath}/${dir.name}`);
    return {folderName: dir.name, filesPath: files.map(file => `${testFolderPath}/${dir.name}/${file}`)};
  });
}

/**
 * @param runId
 * @param reportsFolder
 */
async function attachReports(runId, reportsFolder) {
  if (!OPTS.reportsFolder) {
    if (OPTS.verbose) {
      console.info('No additional reports to attach.');
    }
    return;
  }

  const reports = fs.readdirSync(reportsFolder);

  return Promise.all(reports.map(async (fileName) => {
    const file = fs.readFileSync(path.join(reportsFolder, fileName));
    const bodyAttachment = {stream: file.toString('base64'), filename: fileName};

    const response = await (await fetch(`${API_BASE_PATH}/test/runs/${runId}/attachments?api-version=6.0-preview.1`, {
      ...options,
      method: 'POST',
      body: JSON.stringify(bodyAttachment)
    })).json();

    if (OPTS.verbose) {
      console.info(`Attached report ${fileName}`);
      console.info(JSON.stringify(response, null, 2));
    }
  }));
}

/**
 * Attach files to failed or aborted tests runned in Azure Pipelines
 */
async function attachFilesToTestsResults() {
  const now = new Date();
  const yesterday = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() - 1);
  const dayAfterTomorrow = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() + 2);

  // Retrieve test run by build id
  // eslint-disable-next-line max-len
  const testRunsUrl = `${API_BASE_PATH}/test/runs?minLastUpdatedDate=${formatDate(yesterday)}&maxLastUpdatedDate=${formatDate(dayAfterTomorrow)}&api-version=6.0`;
  const testRuns = await (await fetch(testRunsUrl, options)).json();
  if (OPTS.verbose) {
    console.info('Retrieved runs from Azure API:');
    console.info(JSON.stringify(testRuns, null, 2));
  }
  const testRun = testRuns.value.find(run => run.buildConfiguration.id === BUILDID && run.name === OPTS.runName);
  const runId = testRun.id;
  if (OPTS.verbose) {
    console.info(`Current test run ID: ${runId}`);
  }
  void attachReports(runId, OPTS.reportsFolder);

  // Get all failed or aborted tests id
  const testRunResultsUrl = `${API_BASE_PATH}/test/runs/${runId}/results?api-version=6.0`;
  const testRunResults = await (await fetch(testRunResultsUrl, options)).json();
  const testsId = testRunResults.value.filter(tests => ['Failed', 'Aborted'].includes(tests.outcome)).map(tests => {
    return {id: tests.id, name: tests.automatedTestStorage.replace(/:[0-9]+/g, '').replace(/â€º/g, '').replace(/[ /]+/g, '-').toLowerCase()};
  });

  // Filter the tests folder to only get the failed or aborted tests
  const filesFolder = getFilesFolder(path.join(__dirname, '../../../test-results'));
  if (OPTS.verbose) {
    console.info('Retrieve test run result.');
    console.info(JSON.stringify(testsId, null, 2));

    console.info('Test attachments folders.');
    console.info(JSON.stringify(filesFolder, null, 2));
  }

  const attachments = testsId.map(test => {
    return {id: test.id, folderName: stringSimilarity.findBestMatch(test.name, filesFolder.map(folder => folder.folderName)).bestMatch.target, name: test.name};
  });

  if (OPTS.verbose) {
    console.info('Files to attach:');
    console.info(JSON.stringify(attachments, null, 2));
  }


  // Attach files to failed or aborted tests
  attachments.forEach(({id, folderName}) => {
    const {filesPath} = filesFolder.find(folder => folder.folderName === folderName);
    filesPath.forEach((filePath) => {
      const file = fs.readFileSync(filePath);
      const bodyAttachment = {stream: file.toString('base64'), filename: filePath.split('/').pop()};

      void fetch(`${API_BASE_PATH}/test/runs/${runId}/results/${id}/attachments?api-version=6.0-preview.1`, {
        ...options,
        method: 'POST',
        body: JSON.stringify(bodyAttachment)
      });
    });
  });
}

void attachFilesToTestsResults();
