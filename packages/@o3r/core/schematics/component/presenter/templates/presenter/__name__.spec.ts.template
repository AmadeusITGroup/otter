import {ChangeDetectionStrategy, DebugElement, Provider} from '@angular/core';
import {ComponentFixture, TestBed} from '@angular/core/testing';
import {<% if (!standalone) { %>BrowserModule, <% } %>By} from '@angular/platform-browser';
import {<%= componentName %>} from './<%= name %>.component';

let component: <%= componentName %>;
let fixture: ComponentFixture<<%= componentName %>>;

describe('<%= componentName %>', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      <% if (!standalone) { %>declarations: [<%= componentName %>],<% } %>
      imports: [
        <% if (standalone) { %><%= componentName %><% } else { %>BrowserModule<% } %>
      ]
    }).overrideComponent(<%= componentName %>, {
      set: {changeDetection: ChangeDetectionStrategy.Default}
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(<%= componentName %>);
    component = fixture.componentInstance;
  });

  it('should define objects', () => {
    fixture.detectChanges();
    expect(component).toBeDefined();
  });

  it('should display the component name in a span', () => {
    fixture.detectChanges();
    const titleDebugElement: DebugElement = fixture.debugElement.query(By.css('span'));
    expect(titleDebugElement.nativeElement.innerText).toBe('<%= componentName %>, works!');
  });
});
