import {ChangeDetectionStrategy, DebugElement, Provider} from '@angular/core';
import {ComponentFixture, TestBed} from '@angular/core/testing';
import {BrowserModule, By} from '@angular/platform-browser';
<% if (useLocalization) { %>import {LocalizationService} from '@o3r/localization';
<% } %><% if (useComponentFixtures) {%>import {O3rElement} from '@o3r/testing/core';
<% } %><% if (useLocalization) { %>import {mockTranslationModules} from '@o3r/testing/localization';
import {TranslateCompiler, TranslateFakeCompiler} from '@ngx-translate/core';
<% } %>import {<%= componentName %>} from './<%= name %>.component';
<% if (useComponentFixtures) {%>import {<%= componentFixture %>Component} from './<%= name %>.fixture';
<% } %>
let component: <%= componentName %>;<% if (useComponentFixtures) {%>
let componentFixture: <%= componentFixture %>Component;<% } %>
let fixture: ComponentFixture<<%= componentName %>>;

<% if (useLocalization) { %>const localizationConfiguration = {language: 'en'};
const mockTranslations = {
  en: {<% if(activateDummy) { %>
    '<%= componentSelector %>-pres.dummy1': 'Dummy 1',
    '<%= componentSelector %>-pres.dummy2': 'Dummy 2'
  <% } %>}
};
const mockTranslationsCompilerProvider: Provider = {
  provide: TranslateCompiler,
  useClass: TranslateFakeCompiler
};

<% } %>describe('<%= componentName %>', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [<%= componentName %>],
      imports: [
        BrowserModule<% if (useLocalization) { %>,
        ...mockTranslationModules(localizationConfiguration, mockTranslations, mockTranslationsCompilerProvider)<% } %>
      ]
    }).overrideComponent(<%= componentName %>, {
      set: {changeDetection: ChangeDetectionStrategy.Default}
    }).compileComponents();<% if (useLocalization) { %>

    const localizationService = TestBed.inject(LocalizationService);
    localizationService.configure();<% } %>
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(<%= componentName %>);
    component = fixture.componentInstance;<% if (useComponentFixtures) {%>
    componentFixture = new <%= componentFixture %>Component(new O3rElement(fixture.debugElement));<% } %>
  });

  it('should define objects', () => {
    fixture.detectChanges();
    expect(component).toBeDefined();<% if (useComponentFixtures) {%>
    expect(componentFixture).toBeDefined();<% } %>
  });

  it('should display the component name in a span', () => {
    fixture.detectChanges();
    const titleDebugElement: DebugElement = fixture.debugElement.query(By.css('span'));
    expect(titleDebugElement.nativeElement.innerText).toBe('<%= componentName %>, works!');
  });
});
