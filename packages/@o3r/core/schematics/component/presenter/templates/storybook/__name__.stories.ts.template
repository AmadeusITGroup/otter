import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {EffectsModule} from '@ngrx/effects';
import {StoreModule} from '@ngrx/store';
import {DynamicContentModule} from '@o3r/dynamic-content';
<% if (useOtterConfig) { %>import {configurationReducer} from '@o3r/configuration';
<% } %>import {<% if (useLocalization) { %>applyLocalization, <% } %>applyStyle, <% if (useOtterConfig) { %>extractConfiguration, <% } %><% if (useLocalization) { %>extractLocalization, <% } %>extractStyling<% if (useLocalization) { %>, getLocalizations<% } %><% if (useOtterConfig) { %>, retrieveConfigFromProps<% } %>} from '@o3r/storybook';
import {ComponentWrapper, ComponentWrapperModule<% if (useOtterConfig) { %>, wrapperService<% } %>} from '@o3r/storybook/component-wrapper';<% if (useLocalization) { %>
import {mockTranslationModules} from '@o3r/testing/localization';<% } %>
import {componentWrapperDecorator, Meta, moduleMetadata, Story, StoryContext} from '@storybook/angular';
import {<%= componentName %>} from './<%= name %>.component';<% if (useOtterConfig) { %>
import {<%= configKey %>_CONFIG_ID, <%= configKey %>_DEFAULT_CONFIG} from './<%= name %>.config';<% } %><% if (useLocalization) { %>
import {<%= componentTranslation %>, translations} from './<%= name %>.translation';<% } %>

<% if (useOtterConfig) { %>const componentId = { name: '<%= componentConfig %>', library: '<%= projectName %>' };
<% } %><% if (useLocalization) { %>const localization = extractLocalization(translations);
<% } %>const styling = extractStyling('<%=name%>');
<% if (useOtterConfig) { %>const configuration = extractConfiguration(componentId.library, componentId.name);

const initialState = {
  configuration: {
    ids: [<%= configKey %>_CONFIG_ID],
    entities: {
      [<%= configKey %>_CONFIG_ID]: {
        ...<%= configKey %>_DEFAULT_CONFIG,
        id: <%= configKey %>_CONFIG_ID
      }
    }
  }
  // here initial states for other store slices if needed
};
<% } %>
export default {
  <% if (useOtterConfig) { %>parameters: {
    componentId
  },
  <% } %>title: '<%= projectName %>/<%= componentName %>',
  component: <%= componentName %>,
  decorators: [
    moduleMetadata({
      imports: [
        BrowserAnimationsModule,
        DynamicContentModule,<% if (useLocalization) { %>
        ...mockTranslationModules({ language: 'en' }, { en: getLocalizations() }),<% } %>

        StoreModule.forRoot({}),<% if (useOtterConfig) { %>
        StoreModule.forFeature('configuration', configurationReducer, {initialState: initialState.configuration}),<% } %>
        EffectsModule.forRoot(),
        ComponentWrapperModule
      ]
    }),
    componentWrapperDecorator(ComponentWrapper)
  ],
  argTypes: {
    config: { control: null },<% if (useLocalization) { %>
    translations: { control: null },<% } %>
    ...styling.argTypes<% if (useOtterConfig) { %>,
    ...configuration.argTypes<% } %><% if (useLocalization) { %>,
    ...localization.argTypes<% } %>
  }
} as Meta;

// eslint-disable-next-line @typescript-eslint/naming-convention
const Template: Story<<%= componentName %>> = (props: <%= componentName %>, context: StoryContext) => {<% if (useOtterConfig) { %>
  wrapperService.changeConfig(<%= configKey %>_CONFIG_ID, retrieveConfigFromProps(props));<% } %><% if (useLocalization) { %>
  props.translations = applyLocalization<<%= componentTranslation %>>(localization, props);<% } %>
  applyStyle(styling, props, context.globals.theme);
  return {
    props
  };
};

// eslint-disable-next-line @typescript-eslint/naming-convention
export const Default = Template.bind({});
