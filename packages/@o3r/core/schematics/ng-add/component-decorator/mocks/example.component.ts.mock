import { ChangeDetectionStrategy, Component, Input, Optional, SimpleChanges, ViewEncapsulation } from '@angular/core';
import { InputMerge } from '@o3r/localization';
import { ConfigurationBaseService, ConfigurationObserver, DynamicConfigurable } from '@o3r/configuration';
import { Block } from '@o3r/core';
import { Localization, Translatable } from '@o3r/localization';
import { Observable } from 'rxjs';
import { SIMPLE_HEADER_PRES_CONFIG_DEFAULT, SIMPLE_HEADER_PRES_CONFIG_ID, SimpleHeaderPresConfig } from './simple-header-pres.config';
import { SimpleHeaderPresContext } from './simple-header-pres.context';
import { SimpleHeaderPresTranslation, translations } from './simple-header-pres.translation';

@Component({
  selector: 'o3r-simple-header-pres',
  styleUrls: ['./simple-header-pres.style.scss'],
  templateUrl: './simple-header-pres.template.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
  encapsulation: ViewEncapsulation.None
})
export class SimpleHeaderPresComponent implements DynamicConfigurable<SimpleHeaderPresConfig>, Translatable<SimpleHeaderPresTranslation>, SimpleHeaderPresContext, Block {

  /** Input configuration to override the default configuration of the component */
  @Input()
  public config: Partial<SimpleHeaderPresConfig> | undefined;

  /** Dynamic configuration based on the input override configuration and the configuration service if used by the application */
  private dynamicConfig$: ConfigurationObserver<SimpleHeaderPresConfig>;

  /** Configuration stream based on the input and the stored configuration */
  public config$: Observable<SimpleHeaderPresConfig>;

  /**
   * Localization of the component
   */
  @Input()
  @InputMerge()
  @Localization('./simple-header-pres.localization.json')
  public translations: SimpleHeaderPresTranslation;

  constructor(@Optional() configurationService?: ConfigurationBaseService) {
    this.translations = translations;
    this.dynamicConfig$ = new ConfigurationObserver<SimpleHeaderPresConfig>(SIMPLE_HEADER_PRES_CONFIG_ID, SIMPLE_HEADER_PRES_CONFIG_DEFAULT, configurationService);
    this.config$ = this.dynamicConfig$.asObservable();
  }

  public onChanges(change: SimpleChanges) {
    if (change.config) {
      this.dynamicConfig$.next(this.config);
    }
  }
}
