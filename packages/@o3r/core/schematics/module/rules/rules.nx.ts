import type { PackageJson } from 'type-fest';
import type { NgGenerateModuleSchema } from '../schema';
import { apply, chain, externalSchematic, MergeStrategy, mergeWith, move, renameTemplateFiles, Rule, template, url } from '@angular-devkit/schematics';
import * as path from 'node:path';
import { readFileSync } from 'node:fs';

/**
 * generate the rules to adapt the library generated by nx cli
 *
 * @param options
 * @param rootPath
 */
export function nxGenerateModule(options: NgGenerateModuleSchema & { targetPath: string; projectName: string }): Rule {

  /**
   * Update Nx templates
   *
   * @param tree File tree
   * @param context Context of the schematics
   */
  const updateNxTemplate: Rule = (tree, context) => {
    const o3rCorePackageJsonPath = path.resolve(__dirname, '..', '..', 'package.json');
    const o3rCorePackageJson: PackageJson & { generatorDependencies?: Record<string, string> } = JSON.parse(readFileSync(o3rCorePackageJsonPath)!.toString());
    const otterVersion = o3rCorePackageJson.dependencies!['@o3r/schematics'];

    const templateNx = apply(url('./templates/nx'), [
      template({
        ...options,
        otterVersion,
        runner: process.env.npm_execpath && /[\\/][^\\/]yarn[^\\/]js$/.test(process.env.npm_execpath) ? 'yarn run' : 'npm run'
      }),
      renameTemplateFiles(),
      move(options.targetPath)
    ]);

    return chain([
      mergeWith(templateNx, MergeStrategy.Overwrite),
      (t, _c) => {
        /* eslint-disable @typescript-eslint/naming-convention */
        const packageJson = tree.readJson(path.posix.join(options.targetPath, 'package.json')) as PackageJson;
        const runner = process.env.npm_execpath && /[\\/][^\\/]yarn[^\\/]js$/.test(process.env.npm_execpath) ? 'yarn run' : 'npm run';
        packageJson.description = options.description || packageJson.description;
        packageJson.scripts ||= {};
        packageJson.scripts.build = `${runner} build ${options.projectName}`;
        packageJson.scripts['prepare:build:builders'] = `${runner} cpy 'collection.json' dist && ${runner} cpy 'schematics/**/*.json' dist/schematics`;
        packageJson.scripts['build:builders'] = 'tsc -b tsconfig.builders.json --pretty';
        packageJson.peerDependencies ||= {};
        packageJson.peerDependencies['@o3r/dev-tools'] = otterVersion;
        packageJson.peerDependencies['@o3r/schematics'] = otterVersion;
        packageJson.devDependencies ||= {};
        packageJson.keywords ||= [];
        packageJson.keywords.push('otter-module');
        packageJson.version = '0.0.0-placeholder';

        packageJson.devDependencies = {
          ...packageJson.devDependencies,
          '@angular-devkit/build-angular': o3rCorePackageJson.peerDependencies!['@angular-devkit/core'],
          '@angular-devkit/core': o3rCorePackageJson.peerDependencies!['@angular-devkit/core'],
          '@angular-eslint/eslint-plugin': o3rCorePackageJson.generatorDependencies!['@angular-eslint/eslint-plugin'],
          '@angular/cli': packageJson.peerDependencies['@angular/common'],
          '@angular/common': packageJson.peerDependencies['@angular/common'],
          '@angular/compiler': packageJson.peerDependencies['@angular/common'],
          '@angular/compiler-cli': packageJson.peerDependencies['@angular/common'],
          '@angular/core': packageJson.peerDependencies['@angular/common'],
          '@angular/platform-browser': packageJson.peerDependencies['@angular/common'],
          '@angular/platform-browser-dynamic': packageJson.peerDependencies['@angular/common'],
          '@o3r/dev-tools': otterVersion,
          '@o3r/eslint-plugin': otterVersion,
          '@schematics/angular': o3rCorePackageJson.peerDependencies!['@angular-devkit/core'],
          '@types/jest': o3rCorePackageJson.generatorDependencies!.jest,
          '@typescript-eslint/eslint-plugin': o3rCorePackageJson.generatorDependencies!['@typescript-eslint/parser'],
          '@typescript-eslint/parser': o3rCorePackageJson.generatorDependencies!['@typescript-eslint/parser'],
          'cpy-cli': o3rCorePackageJson.generatorDependencies!['cpy-cli'],
          'eslint': o3rCorePackageJson.generatorDependencies!.eslint,
          'eslint-import-resolver-node': o3rCorePackageJson.generatorDependencies!['eslint-import-resolver-node'],
          'eslint-plugin-jest': o3rCorePackageJson.generatorDependencies!['eslint-plugin-jest'],
          'eslint-plugin-jsdoc': o3rCorePackageJson.generatorDependencies!['eslint-plugin-jsdoc'],
          'eslint-plugin-prefer-arrow': o3rCorePackageJson.generatorDependencies!['eslint-plugin-prefer-arrow'],
          'eslint-plugin-unicorn': o3rCorePackageJson.generatorDependencies!['eslint-plugin-unicorn'],
          'jest': o3rCorePackageJson.generatorDependencies!.jest,
          'jest-environment-jsdom': o3rCorePackageJson.generatorDependencies!.jest,
          'jest-junit': o3rCorePackageJson.generatorDependencies!['jest-junit'],
          'jest-preset-angular': o3rCorePackageJson.generatorDependencies!['jest-preset-angular'],
          'rxjs': o3rCorePackageJson.peerDependencies!.rxjs,
          'typescript': o3rCorePackageJson.peerDependencies!.typescript,
          'zone.js': o3rCorePackageJson.generatorDependencies!['zone.js']
        };
        /* eslint-enable @typescript-eslint/naming-convention */
        t.overwrite(path.posix.join(options.targetPath, 'package.json'), JSON.stringify(packageJson, null, 2));
        return t;
      },
      (t, _c) => {
        const ngPackagr = tree.readJson(path.posix.join(options.targetPath, 'ng-package.json')) as any;
        ngPackagr.$schema = 'https://raw.githubusercontent.com/ng-packagr/ng-packagr/master/src/ng-package.schema.json';
        t.overwrite(path.posix.join(options.targetPath, 'ng-package.json'), JSON.stringify(ngPackagr, null, 2));
        return t;
      }
    ])(tree, context);
  };

  const nxCliUpdate: Rule = (tree, context) => {
    return chain([
      (t, c) => externalSchematic('@nx/js', 'library', {
        name: options.name,
        projectRoot: options.targetPath,
        prefix: options.prefix || undefined
      })(t, c),
      updateNxTemplate
    ])(tree, context);
  };

  return nxCliUpdate;
}
